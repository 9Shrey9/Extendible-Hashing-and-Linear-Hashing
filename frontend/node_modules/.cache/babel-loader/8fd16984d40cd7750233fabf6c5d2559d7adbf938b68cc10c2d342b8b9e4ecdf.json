{"ast":null,"code":"var _jsxFileName = \"C:\\\\Shrey\\\\Nirma\\\\database\\\\Lab\\\\Lab-03\\\\hash_project_v3\\\\project\\\\frontend\\\\src\\\\components\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { RingLoader } from 'react-spinners';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [value, setValue] = useState('');\n  const [searchResult, setSearchResult] = useState(null);\n  const [notification, setNotification] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedHashing, setSelectedHashing] = useState('extendible');\n  const [hashTableState, setHashTableState] = useState(null);\n\n  // Function to handle inserting a new value\n  const handleInsert = async e => {\n    e.preventDefault();\n    const valueNumber = parseInt(value);\n    if (isNaN(valueNumber) || valueNumber < 0) {\n      addNotification('error', 'Please enter a valid positive integer for insertion.');\n      return;\n    }\n    setLoading(true);\n    try {\n      const response = await axios.post(`http://127.0.0.1:5000/${selectedHashing}/insert`, {\n        value: valueNumber\n      });\n      if (response.data && response.data.state) {\n        addNotification('success', response.data.message);\n        setHashTableState(response.data.state);\n      } else {\n        throw new Error(\"Invalid response structure\");\n      }\n      setValue(''); // Clear input field after successful insert\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Error inserting data: ' + error.message;\n      addNotification('error', errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to handle deleting a value\n  const handleDelete = async e => {\n    e.preventDefault();\n    const valueNumber = parseInt(value);\n    if (isNaN(valueNumber) || valueNumber < 0) {\n      addNotification('error', 'Please enter a valid positive integer for deletion.');\n      return;\n    }\n    setLoading(true);\n    try {\n      const response = await axios.post(`http://127.0.0.1:5000/${selectedHashing}/delete`, {\n        value: valueNumber\n      });\n      if (response.data && response.data.state) {\n        addNotification('success', response.data.message);\n        setHashTableState(response.data.state);\n      } else {\n        throw new Error(\"Invalid response structure\");\n      }\n      setValue('');\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Error deleting data: ' + error.message;\n      addNotification('error', errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to handle searching a value\n  const handleSearch = async e => {\n    e.preventDefault();\n    const valueNumber = parseInt(value);\n    if (isNaN(valueNumber) || valueNumber < 0) {\n      addNotification('error', 'Please enter a valid positive integer for searching.');\n      return;\n    }\n    setLoading(true);\n    try {\n      const response = await axios.post(`http://127.0.0.1:5000/${selectedHashing}/search`, {\n        value: valueNumber\n      });\n      if (response.data) {\n        setSearchResult(response.data.message);\n      } else {\n        throw new Error(\"Invalid response structure\");\n      }\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      const errorMessage = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Error searching data: ' + error.message;\n      addNotification('error', errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to display notifications\n  const addNotification = (type, message) => {\n    setNotification([...notification, {\n      type,\n      message\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hashing Application\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"R0znnaRAbOmyF9LIceLjmTBicQw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","RingLoader","jsxDEV","_jsxDEV","App","_s","value","setValue","searchResult","setSearchResult","notification","setNotification","loading","setLoading","selectedHashing","setSelectedHashing","hashTableState","setHashTableState","handleInsert","e","preventDefault","valueNumber","parseInt","isNaN","addNotification","response","post","data","state","message","Error","error","_error$response","_error$response$data","errorMessage","handleDelete","_error$response2","_error$response2$data","handleSearch","_error$response3","_error$response3$data","type","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Shrey/Nirma/database/Lab/Lab-03/hash_project_v3/project/frontend/src/components/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { RingLoader } from 'react-spinners';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [value, setValue] = useState('');\r\n  const [searchResult, setSearchResult] = useState(null);\r\n  const [notification, setNotification] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [selectedHashing, setSelectedHashing] = useState('extendible');\r\n  const [hashTableState, setHashTableState] = useState(null);\r\n\r\n  // Function to handle inserting a new value\r\n  const handleInsert = async (e) => {\r\n    e.preventDefault();\r\n    const valueNumber = parseInt(value);\r\n\r\n    if (isNaN(valueNumber) || valueNumber < 0) {\r\n      addNotification('error', 'Please enter a valid positive integer for insertion.');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      const response = await axios.post(`http://127.0.0.1:5000/${selectedHashing}/insert`, { value: valueNumber });\r\n      if (response.data && response.data.state) {\r\n        addNotification('success', response.data.message);\r\n        setHashTableState(response.data.state);\r\n      } else {\r\n        throw new Error(\"Invalid response structure\");\r\n      }\r\n      setValue(''); // Clear input field after successful insert\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.error || 'Error inserting data: ' + error.message;\r\n      addNotification('error', errorMessage);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Function to handle deleting a value\r\n  const handleDelete = async (e) => {\r\n    e.preventDefault();\r\n    const valueNumber = parseInt(value);\r\n\r\n    if (isNaN(valueNumber) || valueNumber < 0) {\r\n      addNotification('error', 'Please enter a valid positive integer for deletion.');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      const response = await axios.post(`http://127.0.0.1:5000/${selectedHashing}/delete`, { value: valueNumber });\r\n      if (response.data && response.data.state) {\r\n        addNotification('success', response.data.message);\r\n        setHashTableState(response.data.state);\r\n      } else {\r\n        throw new Error(\"Invalid response structure\");\r\n      }\r\n      setValue('');\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.error || 'Error deleting data: ' + error.message;\r\n      addNotification('error', errorMessage);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Function to handle searching a value\r\n  const handleSearch = async (e) => {\r\n    e.preventDefault();\r\n    const valueNumber = parseInt(value);\r\n\r\n    if (isNaN(valueNumber) || valueNumber < 0) {\r\n      addNotification('error', 'Please enter a valid positive integer for searching.');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      const response = await axios.post(`http://127.0.0.1:5000/${selectedHashing}/search`, { value: valueNumber });\r\n      if (response.data) {\r\n        setSearchResult(response.data.message);\r\n      } else {\r\n        throw new Error(\"Invalid response structure\");\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.error || 'Error searching data: ' + error.message;\r\n      addNotification('error', errorMessage);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Function to display notifications\r\n  const addNotification = (type, message) => {\r\n    setNotification([...notification, { type, message }]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Hashing Application</h1>\r\n      {/* Form components and UI logic */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}