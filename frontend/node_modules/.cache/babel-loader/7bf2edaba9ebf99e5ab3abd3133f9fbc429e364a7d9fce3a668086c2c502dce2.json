{"ast":null,"code":"var _jsxFileName = \"C:\\\\Shrey\\\\Nirma\\\\database\\\\Lab\\\\Lab-03\\\\hash_project_v3\\\\project\\\\frontend\\\\src\\\\components\\\\App.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import { RingLoader } from 'react-spinners';\n// import './App.css';\n\n// function App() {\n//   const [insertKey, setInsertKey] = useState('');\n//   const [insertValue, setInsertValue] = useState('');\n//   const [deleteKey, setDeleteKey] = useState('');\n//   const [searchKey, setSearchKey] = useState('');\n//   const [searchResult, setSearchResult] = useState(null);\n//   const [notification, setNotification] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [selectedHashing, setSelectedHashing] = useState('extendible');\n//   const [hashTableState, setHashTableState] = useState(null);\n\n//   const handleInsert = async (e) => {\n//     e.preventDefault();\n//     if (!insertKey || !insertValue) {\n//       addNotification('error', 'Key and Value must be provided for insertion.');\n//       return;\n//     }\n\n//     setLoading(true);\n//     try {\n//       const response = await axios.post(`http://127.0.0.1:5000/${selectedHashing}/insert`, {\n//         key: parseInt(insertKey),\n//         value: insertValue,\n//       });\n\n//       if (response.data) {\n//         addNotification('success', `Inserted (${response.data.inserted.key}, ${response.data.inserted.value}) successfully.`);\n//         setHashTableState(response.data.state);\n//       } else {\n//         throw new Error(\"Invalid response structure\");\n//       }\n\n//       setInsertKey('');\n//       setInsertValue('');\n//     } catch (error) {\n//       const errorMessage = error.response?.data?.error || 'Error inserting data: ' + error.message;\n//       addNotification('error', errorMessage);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleDelete = async (e) => {\n//     e.preventDefault();\n//     if (!deleteKey) {\n//       addNotification('error', 'Key must be provided for deletion.');\n//       return;\n//     }\n\n//     setLoading(true);\n//     try {\n//       const response = await axios.delete(`http://127.0.0.1:5000/${selectedHashing}/delete`, {\n//         data: { key: parseInt(deleteKey) },\n//       });\n\n//       if (response.data) {\n//         addNotification('success', response.data.message);\n//         setHashTableState(response.data.state);\n//       } else {\n//         throw new Error(\"Invalid response structure\");\n//       }\n\n//       setDeleteKey('');\n//     } catch (error) {\n//       const errorMessage = error.response?.data?.error || 'Error deleting data: ' + error.message;\n//       addNotification('error', errorMessage);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleSearch = async (e) => {\n//     e.preventDefault();\n//     if (!searchKey) {\n//       addNotification('error', 'Key must be provided for search.');\n//       return;\n//     }\n\n//     setLoading(true);\n//     try {\n//       const response = await axios.get(`http://127.0.0.1:5000/${selectedHashing}/search?key=${searchKey}`);\n\n//       if (response.data) {\n//         if (response.data.message) {\n//           setSearchResult(response.data.message);\n//           addNotification('success', `Found key ${searchKey}: ${response.data.message}`);\n//         } else {\n//           addNotification('info', `Key ${searchKey} not found.`);\n//         }\n//         setHashTableState(response.data.state);\n//       } else {\n//         throw new Error(\"Invalid response structure\");\n//       }\n\n//       setSearchKey('');\n//     } catch (error) {\n//       const errorMessage = error.response?.data?.error || 'Error searching data: ' + error.message;\n//       addNotification('error', errorMessage);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const addNotification = (type, message) => {\n//     const newNotification = { id: new Date().getTime(), type, message };\n//     setNotification((prev) => [...prev, newNotification]);\n//   };\n\n//   const handleReset = () => {\n//     setInsertKey('');\n//     setInsertValue('');\n//     setDeleteKey('');\n//     setSearchKey('');\n//     setSearchResult(null);\n//     setNotification([]);\n//   };\n\n//   const renderHashTableState = () => {\n//     if (!hashTableState) return null;\n\n//     return (\n//       <div className=\"hash-table-state\">\n//         <h2>Hash Table State</h2>\n//         <p><strong>Global Depth:</strong> {hashTableState.globalDepth}</p>\n//         <table className=\"hash-table\">\n//           <thead>\n//             <tr>\n//               <th>Bucket Index</th>\n//               <th>Directory Pointer</th>\n//               <th>Local Depth</th>\n//               <th>Bucket Content</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {hashTableState.buckets.map((bucket, index) => (\n//               <tr key={index}>\n//                 <td>{index}</td>\n//                 <td>{hashTableState.directory[index]}</td>\n//                 <td>{bucket.localDepth}</td>\n//                 <td>{JSON.stringify(bucket.content)}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n//     );\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <div className=\"App\">\n//         <div className=\"main-content\">\n//           <h1>Hash Table Visualization</h1>\n//           <div>\n//             <label>Select Hashing Method:</label>\n//             <select\n//               value={selectedHashing}\n//               onChange={(e) => setSelectedHashing(e.target.value)}\n//               style={{ margin: '10px 0' }}\n//             >\n//               <option value=\"extendible\">Extendible Hashing</option>\n//               <option value=\"linear\">Linear Hashing</option>\n//             </select>\n//           </div>\n\n//           <form onSubmit={handleInsert} className=\"form-section\">\n//             <h2>Insert</h2>\n//             <input\n//               type=\"number\"\n//               placeholder=\"Key\"\n//               value={insertKey}\n//               onChange={(e) => setInsertKey(e.target.value)}\n//             />\n//             <input\n//               type=\"text\"\n//               placeholder=\"Value\"\n//               value={insertValue}\n//               onChange={(e) => setInsertValue(e.target.value)}\n//             />\n//             <button type=\"submit\">Insert</button>\n//           </form>\n\n//           <form onSubmit={handleDelete} className=\"form-section\">\n//             <h2>Delete</h2>\n//             <input\n//               type=\"number\"\n//               placeholder=\"Key\"\n//               value={deleteKey}\n//               onChange={(e) => setDeleteKey(e.target.value)}\n//             />\n//             <button type=\"submit\">Delete</button>\n//           </form>\n\n//           <form onSubmit={handleSearch} className=\"form-section\">\n//             <h2>Search</h2>\n//             <input\n//               type=\"number\"\n//               placeholder=\"Key\"\n//               value={searchKey}\n//               onChange={(e) => setSearchKey(e.target.value)}\n//             />\n//             <button type=\"submit\">Search</button>\n//           </form>\n\n//           {loading && (\n//             <div className=\"loading-indicator\">\n//               <RingLoader size={50} color={'#123abc'} loading={loading} />\n//             </div>\n//           )}\n\n//           <div className=\"reset-container\">\n//             <button onClick={handleReset}>Reset</button>\n//           </div>\n\n//           {searchResult && (\n//             <div className=\"search-result\">\n//               <h3>Search Result:</h3>\n//               <p>{searchResult}</p>\n//             </div>\n//           )}\n\n//           {renderHashTableState()}\n//         </div>\n\n//         <div className=\"notification-panel\">\n//           <h2>Notifications</h2>\n//           {notification.map((note) => (\n//             <div key={note.id} className={`notification ${note.type}`}>\n//               <span>{note.message}</span>\n//               <button onClick={() => setNotification(notification.filter((n) => n.id !== note.id))}>\n//                 âœ–\n//               </button>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { RingLoader } from 'react-spinners';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [insertKey, setInsertKey] = useState('');\n  const [insertValue, setInsertValue] = useState('');\n  const [deleteKey, setDeleteKey] = useState('');\n  const [searchKey, setSearchKey] = useState('');\n  const [searchResult, setSearchResult] = useState(null);\n  const [notification, setNotification] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedHashing, setSelectedHashing] = useState('extendible');\n  const [hashTableState, setHashTableState] = useState(null);\n  const handleInsert = async e => {\n    e.preventDefault();\n    if (!insertKey || !insertValue) {\n      addNotification('error', 'Key and Value must be provided for insertion.');\n      return;\n    }\n    setLoading(true);\n    try {\n      const response = await axios.post(`http://127.0.0.1:5000/${selectedHashing}/insert`, {\n        key: parseInt(insertKey),\n        value: insertValue\n      });\n      if (response.data) {\n        addNotification('success', `Inserted (${response.data.inserted.key}, ${response.data.inserted.value}) successfully.`);\n        setHashTableState(response.data.state);\n      } else {\n        throw new Error(\"Invalid response structure\");\n      }\n      setInsertKey('');\n      setInsertValue('');\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Error inserting data: ' + error.message;\n      addNotification('error', errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleDelete = async e => {\n    e.preventDefault();\n    if (!deleteKey) {\n      addNotification('error', 'Key must be provided for deletion.');\n      return;\n    }\n    setLoading(true);\n    try {\n      const response = await axios.delete(`http://127.0.0.1:5000/${selectedHashing}/delete`, {\n        data: {\n          key: parseInt(deleteKey)\n        }\n      });\n      if (response.data) {\n        addNotification('success', response.data.message);\n        setHashTableState(response.data.state);\n      } else {\n        throw new Error(\"Invalid response structure\");\n      }\n      setDeleteKey('');\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Error deleting data: ' + error.message;\n      addNotification('error', errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleSearch = async e => {\n    e.preventDefault();\n    if (!searchKey) {\n      addNotification('error', 'Key must be provided for search.');\n      return;\n    }\n    setLoading(true);\n    try {\n      const response = await axios.get(`http://127.0.0.1:5000/${selectedHashing}/search?key=${searchKey}`);\n      if (response.data) {\n        if (response.data.message) {\n          setSearchResult(response.data.message);\n          addNotification('success', `Found key ${searchKey}: ${response.data.message}`);\n        } else {\n          addNotification('info', `Key ${searchKey} not found.`);\n        }\n        setHashTableState(response.data.state);\n      } else {\n        throw new Error(\"Invalid response structure\");\n      }\n      setSearchKey('');\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      const errorMessage = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Error searching data: ' + error.message;\n      addNotification('error', errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const addNotification = (type, message) => {\n    const newNotification = {\n      id: new Date().getTime(),\n      type,\n      message\n    };\n    setNotification(prev => [...prev, newNotification]);\n  };\n  const handleReset = () => {\n    setInsertKey('');\n    setInsertValue('');\n    setDeleteKey('');\n    setSearchKey('');\n    setSearchResult(null);\n    setNotification([]);\n    setHashTableState(null);\n  };\n\n  // const renderHashTableState = () => {\n  //   if (!hashTableState) return null;\n\n  //   return (\n  //     <div className=\"hash-table-state\">\n  //       <h2>Hash Table State</h2>\n  //       <p><strong>Current Size:</strong> {hashTableState.current_size}</p>\n  //       <p><strong>Entry Count:</strong> {hashTableState.entry_count}</p>\n  //       <p><strong>Load Factor:</strong> {hashTableState.load_factor}</p>\n  //       <table className=\"hash-table\">\n  //         <thead>\n  //           <tr>\n  //             <th>Bucket Index</th>\n  //             <th>Bucket Content</th>\n  //           </tr>\n  //         </thead>\n  //         <tbody>\n  //           {hashTableState.bucket_sizes && Object.entries(hashTableState.bucket_sizes).map(([index, size]) => (\n  //             <tr key={index}>\n  //               <td>{index}</td>\n  //               <td>{JSON.stringify(hashTableState.bucket_contents[index] || [])}</td>\n  //             </tr>\n  //           ))}\n  //         </tbody>\n  //       </table>\n  //     </div>\n  //   );\n  // };\n\n  //   const renderHashTableState = () => {\n  //     if (!hashTableState || !hashTableState.bucket_sizes || !hashTableState.bucket_contents) return null;\n\n  //     return (\n  //         <div className=\"hash-table-state\">\n  //             <h2>Hash Table State</h2>\n  //             <p><strong>Current Size:</strong> {hashTableState.current_size}</p>\n  //             <p><strong>Entry Count:</strong> {hashTableState.entry_count}</p>\n  //             <p><strong>Load Factor:</strong> {hashTableState.load_factor}</p>\n  //             <table className=\"hash-table\">\n  //                 <thead>\n  //                     <tr>\n  //                         <th>Bucket Index</th>\n  //                         <th>Bucket Content</th>\n  //                     </tr>\n  //                 </thead>\n  //                 <tbody>\n  //                     {Object.entries(hashTableState.bucket_sizes).map(([index, size]) => (\n  //                         <tr key={index}>\n  //                             <td>{index}</td>\n  //                             <td>{JSON.stringify(hashTableState.bucket_contents[index] || [])}</td>\n  //                         </tr>\n  //                     ))}\n  //                 </tbody>\n  //             </table>\n  //         </div>\n  //     );\n  // };\n\n  // const renderHashTableState = () => {\n  //   if (!hashTableState) return null;\n\n  //   const isLinearHashing = hashTableState.current_size !== undefined;\n  //   const isExtendibleHashing = hashTableState.current_level !== undefined;\n\n  //   return (\n  //       <div className=\"hash-table-state\">\n  //           <h2>Hash Table State</h2>\n  //           {isLinearHashing && (\n  //               <>\n  //                   <p><strong>Current Size:</strong> {hashTableState.current_size}</p>\n  //                   <p><strong>Entry Count:</strong> {hashTableState.entry_count}</p>\n  //                   <p><strong>Load Factor:</strong> {hashTableState.load_factor}</p>\n  //                   <h3>Linear Hashing - Index Table</h3>\n  //                   <table className=\"hash-table\">\n  //                       <thead>\n  //                           <tr>\n  //                               <th>Bucket Index</th>\n  //                               <th>Bucket Content</th>\n  //                           </tr>\n  //                       </thead>\n  //                       <tbody>\n  //                           {Object.entries(hashTableState.bucket_sizes).map(([index, size]) => (\n  //                               <tr key={index}>\n  //                                   <td>{index}</td>\n  //                                   <td>{JSON.stringify(hashTableState.bucket_contents[index] || [])}</td>\n  //                               </tr>\n  //                           ))}\n  //                       </tbody>\n  //                   </table>\n  //               </>\n  //           )}\n\n  //           {isExtendibleHashing && (\n  //               <>\n  //                   <p><strong>Current Level (Global Depth):</strong> {hashTableState.current_level}</p>\n  //                   <p><strong>Bucket Count:</strong> {hashTableState.bucket_count}</p>\n  //                   <h3>Extendible Hashing - Directory</h3>\n  //                   <p><strong>Global Depth:</strong> {hashTableState.current_level}</p>\n  //                   <h3>Local Depths</h3>\n  //                   <ul>\n  //                       {Object.entries(hashTableState.local_depths).map(([index, depth]) => (\n  //                           <li key={index}>Bucket {index}: Local Depth {depth}</li>\n  //                       ))}\n  //                   </ul>\n  //                   <h3>Index Table</h3>\n  //                   <table className=\"hash-table\">\n  //                       <thead>\n  //                           <tr>\n  //                               <th>Directory</th>\n  //                               <th>Bucket Content</th>\n  //                           </tr>\n  //                       </thead>\n  //                       <tbody>\n  //                           {Object.entries(hashTableState.bucket_contents).map(([index, content]) => (\n  //                               <tr key={index}>\n  //                                   <td>{index}</td>\n  //                                   <td>{JSON.stringify(content || [])}</td>\n  //                               </tr>\n  //                           ))}\n  //                       </tbody>\n  //                   </table>\n  //               </>\n  //           )}\n  //       </div>\n  //   );\n  // };\n\n  //   const renderHashTableState = () => {\n  //     if (!hashTableState) return null;\n\n  //     // Identify the type of hashing based on unique properties\n  //     const isLinearHashing = hashTableState.current_size !== undefined;\n  //     const isExtendibleHashing = hashTableState.current_level !== undefined;\n\n  //     return (\n  //         <div className=\"hash-table-state\">\n  //             <h2>Hash Table State</h2>\n\n  //             {/* Linear Hashing Display */}\n  //             {isLinearHashing && (\n  //                 <>\n  //                     <h3>Linear Hashing State</h3>\n  //                     <p><strong>Current Size:</strong> {hashTableState.current_size}</p>\n  //                     <p><strong>Entry Count:</strong> {hashTableState.entry_count}</p>\n  //                     <p><strong>Load Factor:</strong> {hashTableState.load_factor.toFixed(2)}</p>\n\n  //                     {/* Display Index Table */}\n  //                     <h3>Linear Hashing - Index Table</h3>\n  //                     <table className=\"hash-table\">\n  //                         <thead>\n  //                             <tr>\n  //                                 <th>Bucket Index</th>\n  //                                 <th>Bucket Content</th>\n  //                             </tr>\n  //                         </thead>\n  //                         <tbody>\n  //                             {Object.entries(hashTableState.bucket_contents).map(([index, content]) => (\n  //                                 <tr key={index}>\n  //                                     <td>{index}</td>\n  //                                     <td>{JSON.stringify(content || [])}</td>\n  //                                 </tr>\n  //                             ))}\n  //                         </tbody>\n  //                     </table>\n  //                 </>\n  //             )}\n\n  //             {/* Extendible Hashing Display */}\n  //             {isExtendibleHashing && (\n  //                 <>\n  //                     <h3>Extendible Hashing State</h3>\n  //                     <p><strong>Current Level (Global Depth):</strong> {hashTableState.current_level}</p>\n  //                     <p><strong>Bucket Count:</strong> {hashTableState.bucket_count}</p>\n\n  //                     {/* Global Depth Information */}\n  //                     <h3>Extendible Hashing - Directory</h3>\n  //                     <p><strong>Global Depth:</strong> {hashTableState.current_level}</p>\n\n  //                     {/* Local Depths Section */}\n  //                     <h3>Local Depths</h3>\n  //                     <ul>\n  //                         {Object.entries(hashTableState.local_depths).map(([index, depth]) => (\n  //                             <li key={index}>Bucket {index}: Local Depth {depth}</li>\n  //                         ))}\n  //                     </ul>\n\n  //                     {/* Directory Content Table */}\n  //                     <h3>Index Table</h3>\n  //                     <table className=\"hash-table\">\n  //                         <thead>\n  //                             <tr>\n  //                                 <th>Directory</th>\n  //                                 <th>Bucket Content</th>\n  //                             </tr>\n  //                         </thead>\n  //                         <tbody>\n  //                             {Object.entries(hashTableState.bucket_contents).map(([index, content]) => (\n  //                                 <tr key={index}>\n  //                                     <td>{index}</td>\n  //                                     <td>{JSON.stringify(content || [])}</td>\n  //                                 </tr>\n  //                             ))}\n  //                         </tbody>\n  //                     </table>\n  //                 </>\n  //             )}\n  //         </div>\n  //     );\n  // };\n\n  // const renderHashTableState = () => {\n  //   if (!hashTableState) return null;\n\n  //   // Identify the type of hashing based on unique properties\n  //   const isLinearHashing = hashTableState.current_size !== undefined;\n  //   const isExtendibleHashing = hashTableState.current_level !== undefined;\n\n  //   return (\n  //       <div className=\"hash-table-state\">\n  //           <h2>Hash Table State</h2>\n\n  //           {/* Linear Hashing Display */}\n  //           {isLinearHashing && (\n  //               <>\n  //                   <h3>Linear Hashing State</h3>\n  //                   <p><strong>Current Size:</strong> {hashTableState.current_size}</p>\n  //                   <p><strong>Entry Count:</strong> {hashTableState.entry_count}</p>\n  //                   <p><strong>Load Factor:</strong> {hashTableState.load_factor.toFixed(2)}</p>\n\n  //                   {/* Display Index Table */}\n  //                   <h3>Linear Hashing - Index Table</h3>\n  //                   <table className=\"hash-table\">\n  //                       <thead>\n  //                           <tr>\n  //                               <th>Bucket Index</th>\n  //                               <th>Bucket Content</th>\n  //                           </tr>\n  //                       </thead>\n  //                       <tbody>\n  //                           {/* Iterate over bucket_contents, ensuring it's handled safely */}\n  //                           {Object.entries(hashTableState.bucket_contents || {}).map(([index, content]) => (\n  //                               <tr key={index}>\n  //                                   <td>{index}</td>\n  //                                   <td>{JSON.stringify(content)}</td>\n  //                               </tr>\n  //                           ))}\n  //                       </tbody>\n  //                   </table>\n  //               </>\n  //           )}\n\n  //           {/* Extendible Hashing Display */}\n  //           {isExtendibleHashing && (\n  //               <>\n  //                   <h3>Extendible Hashing State</h3>\n  //                   <p><strong>Current Level (Global Depth):</strong> {hashTableState.current_level}</p>\n  //                   <p><strong>Bucket Count:</strong> {hashTableState.bucket_count}</p>\n\n  //                   {/* Global Depth Information */}\n  //                   <h3>Extendible Hashing - Directory</h3>\n  //                   <p><strong>Global Depth:</strong> {hashTableState.current_level}</p>\n\n  //                   {/* Local Depths Section */}\n  //                   <h3>Local Depths</h3>\n  //                   <ul>\n  //                       {Object.entries(hashTableState.local_depths || {}).map(([index, depth]) => (\n  //                           <li key={index}>Bucket {index}: Local Depth {depth}</li>\n  //                       ))}\n  //                   </ul>\n\n  //                   {/* Directory Content Table */}\n  //                   <h3>Index Table</h3>\n  //                   <table className=\"hash-table\">\n  //                       <thead>\n  //                           <tr>\n  //                               <th>Directory</th>\n  //                               <th>Bucket Content</th>\n  //                           </tr>\n  //                       </thead>\n  //                       <tbody>\n  //                           {/* Display bucket contents for extendible hashing */}\n  //                           {Object.entries(hashTableState.bucket_contents || {}).map(([index, content]) => (\n  //                               <tr key={index}>\n  //                                   <td>{index}</td>\n  //                                   <td>{JSON.stringify(content)}</td>\n  //                               </tr>\n  //                           ))}\n  //                       </tbody>\n  //                   </table>\n  //               </>\n  //           )}\n  //       </div>\n  //   );\n  // };\n\n  const renderHashTableState = () => {\n    if (!hashTableState) return null;\n\n    // Identify the type of hashing based on unique properties\n    const isLinearHashing = hashTableState.current_size !== undefined;\n    const isExtendibleHashing = hashTableState.current_level !== undefined;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hash-table-state\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Hash Table State\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 9\n      }, this), isLinearHashing && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Linear Hashing State\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 681,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Current Size:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 683,\n            columnNumber: 15\n          }, this), \" \", hashTableState.current_size]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Entry Count:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 15\n          }, this), \" \", hashTableState.entry_count]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Load Factor:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 689,\n            columnNumber: 15\n          }, this), \" \", hashTableState.load_factor.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 688,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Linear Hashing - Index Table\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 693,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"hash-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Bucket Index\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 697,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Bucket Content\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 698,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 696,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 695,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: hashTableState.bucket_contents && Object.entries(hashTableState.bucket_contents).map(([index, content]) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: index\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 707,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: content.length > 0 ? JSON.stringify(content) : \"Empty\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 708,\n                columnNumber: 25\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 706,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 701,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 694,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), isExtendibleHashing && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Extendible Hashing State\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 720,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Current Level (Global Depth):\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 722,\n            columnNumber: 15\n          }, this), \" \", hashTableState.current_level]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 721,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Bucket Count:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 725,\n            columnNumber: 15\n          }, this), \" \", hashTableState.bucket_count]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 724,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Extendible Hashing - Directory\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 729,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Global Depth:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 731,\n            columnNumber: 15\n          }, this), \" \", hashTableState.current_level]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 730,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Local Depths\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 735,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: hashTableState.local_depths && Object.entries(hashTableState.local_depths).map(([index, depth]) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Bucket \", index, \": Local Depth \", depth]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 739,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 736,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Index Table\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 746,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"hash-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Directory\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 750,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Bucket Content\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 751,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 749,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 748,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: hashTableState.bucket_contents && Object.entries(hashTableState.bucket_contents).map(([index, content]) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: index\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 759,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: content.length > 0 ? JSON.stringify(content) : \"Empty\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 760,\n                columnNumber: 23\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 758,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 754,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 747,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 675,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Hash Table Visualization\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 777,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Select Hashing Method:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 779,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedHashing,\n            onChange: e => setSelectedHashing(e.target.value),\n            style: {\n              margin: '10px 0'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"extendible\",\n              children: \"Extendible Hashing\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 785,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"linear\",\n              children: \"Linear Hashing\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 786,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 780,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 778,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleInsert,\n          className: \"form-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Insert\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 791,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"Key\",\n            value: insertKey,\n            onChange: e => setInsertKey(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 792,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Value\",\n            value: insertValue,\n            onChange: e => setInsertValue(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 798,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Insert\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 804,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 790,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleDelete,\n          className: \"form-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 808,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"Key\",\n            value: deleteKey,\n            onChange: e => setDeleteKey(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 809,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 815,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 807,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSearch,\n          className: \"form-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 819,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"Key\",\n            value: searchKey,\n            onChange: e => setSearchKey(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 820,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 826,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 818,\n          columnNumber: 11\n        }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-indicator\",\n          children: /*#__PURE__*/_jsxDEV(RingLoader, {\n            size: 50,\n            color: '#123abc',\n            loading: loading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 831,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 830,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reset-container\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleReset,\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 836,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 835,\n          columnNumber: 11\n        }, this), searchResult && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-result\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Search Result:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 841,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: searchResult\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 842,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 840,\n          columnNumber: 13\n        }, this), renderHashTableState()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 776,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notification-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Notifications\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 850,\n          columnNumber: 11\n        }, this), notification.map(note => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `notification ${note.type}`,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: note.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 853,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setNotification(notification.filter(n => n.id !== note.id)),\n            children: \"\\u2716\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 854,\n            columnNumber: 15\n          }, this)]\n        }, note.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 852,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 849,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 775,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 774,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"g40vMnebBi208c6LxEW4d1X2rIg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","RingLoader","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","insertKey","setInsertKey","insertValue","setInsertValue","deleteKey","setDeleteKey","searchKey","setSearchKey","searchResult","setSearchResult","notification","setNotification","loading","setLoading","selectedHashing","setSelectedHashing","hashTableState","setHashTableState","handleInsert","e","preventDefault","addNotification","response","post","key","parseInt","value","data","inserted","state","Error","error","_error$response","_error$response$data","errorMessage","message","handleDelete","delete","_error$response2","_error$response2$data","handleSearch","get","_error$response3","_error$response3$data","type","newNotification","id","Date","getTime","prev","handleReset","renderHashTableState","isLinearHashing","current_size","undefined","isExtendibleHashing","current_level","className","children","fileName","_jsxFileName","lineNumber","columnNumber","entry_count","load_factor","toFixed","bucket_contents","Object","entries","map","index","content","length","JSON","stringify","bucket_count","local_depths","depth","onChange","target","style","margin","onSubmit","placeholder","size","color","onClick","note","filter","n","_c","$RefreshReg$"],"sources":["C:/Shrey/Nirma/database/Lab/Lab-03/hash_project_v3/project/frontend/src/components/App.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n// import { RingLoader } from 'react-spinners';\r\n// import './App.css';\r\n\r\n// function App() {\r\n//   const [insertKey, setInsertKey] = useState('');\r\n//   const [insertValue, setInsertValue] = useState('');\r\n//   const [deleteKey, setDeleteKey] = useState('');\r\n//   const [searchKey, setSearchKey] = useState('');\r\n//   const [searchResult, setSearchResult] = useState(null);\r\n//   const [notification, setNotification] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [selectedHashing, setSelectedHashing] = useState('extendible');\r\n//   const [hashTableState, setHashTableState] = useState(null);\r\n\r\n//   const handleInsert = async (e) => {\r\n//     e.preventDefault();\r\n//     if (!insertKey || !insertValue) {\r\n//       addNotification('error', 'Key and Value must be provided for insertion.');\r\n//       return;\r\n//     }\r\n\r\n//     setLoading(true);\r\n//     try {\r\n//       const response = await axios.post(`http://127.0.0.1:5000/${selectedHashing}/insert`, {\r\n//         key: parseInt(insertKey),\r\n//         value: insertValue,\r\n//       });\r\n\r\n//       if (response.data) {\r\n//         addNotification('success', `Inserted (${response.data.inserted.key}, ${response.data.inserted.value}) successfully.`);\r\n//         setHashTableState(response.data.state);\r\n//       } else {\r\n//         throw new Error(\"Invalid response structure\");\r\n//       }\r\n\r\n//       setInsertKey('');\r\n//       setInsertValue('');\r\n//     } catch (error) {\r\n//       const errorMessage = error.response?.data?.error || 'Error inserting data: ' + error.message;\r\n//       addNotification('error', errorMessage);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleDelete = async (e) => {\r\n//     e.preventDefault();\r\n//     if (!deleteKey) {\r\n//       addNotification('error', 'Key must be provided for deletion.');\r\n//       return;\r\n//     }\r\n\r\n//     setLoading(true);\r\n//     try {\r\n//       const response = await axios.delete(`http://127.0.0.1:5000/${selectedHashing}/delete`, {\r\n//         data: { key: parseInt(deleteKey) },\r\n//       });\r\n\r\n//       if (response.data) {\r\n//         addNotification('success', response.data.message);\r\n//         setHashTableState(response.data.state);\r\n//       } else {\r\n//         throw new Error(\"Invalid response structure\");\r\n//       }\r\n\r\n//       setDeleteKey('');\r\n//     } catch (error) {\r\n//       const errorMessage = error.response?.data?.error || 'Error deleting data: ' + error.message;\r\n//       addNotification('error', errorMessage);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleSearch = async (e) => {\r\n//     e.preventDefault();\r\n//     if (!searchKey) {\r\n//       addNotification('error', 'Key must be provided for search.');\r\n//       return;\r\n//     }\r\n\r\n//     setLoading(true);\r\n//     try {\r\n//       const response = await axios.get(`http://127.0.0.1:5000/${selectedHashing}/search?key=${searchKey}`);\r\n\r\n//       if (response.data) {\r\n//         if (response.data.message) {\r\n//           setSearchResult(response.data.message);\r\n//           addNotification('success', `Found key ${searchKey}: ${response.data.message}`);\r\n//         } else {\r\n//           addNotification('info', `Key ${searchKey} not found.`);\r\n//         }\r\n//         setHashTableState(response.data.state);\r\n//       } else {\r\n//         throw new Error(\"Invalid response structure\");\r\n//       }\r\n\r\n//       setSearchKey('');\r\n//     } catch (error) {\r\n//       const errorMessage = error.response?.data?.error || 'Error searching data: ' + error.message;\r\n//       addNotification('error', errorMessage);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const addNotification = (type, message) => {\r\n//     const newNotification = { id: new Date().getTime(), type, message };\r\n//     setNotification((prev) => [...prev, newNotification]);\r\n//   };\r\n\r\n//   const handleReset = () => {\r\n//     setInsertKey('');\r\n//     setInsertValue('');\r\n//     setDeleteKey('');\r\n//     setSearchKey('');\r\n//     setSearchResult(null);\r\n//     setNotification([]);\r\n//   };\r\n\r\n//   const renderHashTableState = () => {\r\n//     if (!hashTableState) return null;\r\n\r\n//     return (\r\n//       <div className=\"hash-table-state\">\r\n//         <h2>Hash Table State</h2>\r\n//         <p><strong>Global Depth:</strong> {hashTableState.globalDepth}</p>\r\n//         <table className=\"hash-table\">\r\n//           <thead>\r\n//             <tr>\r\n//               <th>Bucket Index</th>\r\n//               <th>Directory Pointer</th>\r\n//               <th>Local Depth</th>\r\n//               <th>Bucket Content</th>\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody>\r\n//             {hashTableState.buckets.map((bucket, index) => (\r\n//               <tr key={index}>\r\n//                 <td>{index}</td>\r\n//                 <td>{hashTableState.directory[index]}</td>\r\n//                 <td>{bucket.localDepth}</td>\r\n//                 <td>{JSON.stringify(bucket.content)}</td>\r\n//               </tr>\r\n//             ))}\r\n//           </tbody>\r\n//         </table>\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"app-container\">\r\n//       <div className=\"App\">\r\n//         <div className=\"main-content\">\r\n//           <h1>Hash Table Visualization</h1>\r\n//           <div>\r\n//             <label>Select Hashing Method:</label>\r\n//             <select\r\n//               value={selectedHashing}\r\n//               onChange={(e) => setSelectedHashing(e.target.value)}\r\n//               style={{ margin: '10px 0' }}\r\n//             >\r\n//               <option value=\"extendible\">Extendible Hashing</option>\r\n//               <option value=\"linear\">Linear Hashing</option>\r\n//             </select>\r\n//           </div>\r\n\r\n//           <form onSubmit={handleInsert} className=\"form-section\">\r\n//             <h2>Insert</h2>\r\n//             <input\r\n//               type=\"number\"\r\n//               placeholder=\"Key\"\r\n//               value={insertKey}\r\n//               onChange={(e) => setInsertKey(e.target.value)}\r\n//             />\r\n//             <input\r\n//               type=\"text\"\r\n//               placeholder=\"Value\"\r\n//               value={insertValue}\r\n//               onChange={(e) => setInsertValue(e.target.value)}\r\n//             />\r\n//             <button type=\"submit\">Insert</button>\r\n//           </form>\r\n\r\n//           <form onSubmit={handleDelete} className=\"form-section\">\r\n//             <h2>Delete</h2>\r\n//             <input\r\n//               type=\"number\"\r\n//               placeholder=\"Key\"\r\n//               value={deleteKey}\r\n//               onChange={(e) => setDeleteKey(e.target.value)}\r\n//             />\r\n//             <button type=\"submit\">Delete</button>\r\n//           </form>\r\n\r\n//           <form onSubmit={handleSearch} className=\"form-section\">\r\n//             <h2>Search</h2>\r\n//             <input\r\n//               type=\"number\"\r\n//               placeholder=\"Key\"\r\n//               value={searchKey}\r\n//               onChange={(e) => setSearchKey(e.target.value)}\r\n//             />\r\n//             <button type=\"submit\">Search</button>\r\n//           </form>\r\n\r\n//           {loading && (\r\n//             <div className=\"loading-indicator\">\r\n//               <RingLoader size={50} color={'#123abc'} loading={loading} />\r\n//             </div>\r\n//           )}\r\n\r\n//           <div className=\"reset-container\">\r\n//             <button onClick={handleReset}>Reset</button>\r\n//           </div>\r\n\r\n//           {searchResult && (\r\n//             <div className=\"search-result\">\r\n//               <h3>Search Result:</h3>\r\n//               <p>{searchResult}</p>\r\n//             </div>\r\n//           )}\r\n\r\n//           {renderHashTableState()}\r\n//         </div>\r\n\r\n//         <div className=\"notification-panel\">\r\n//           <h2>Notifications</h2>\r\n//           {notification.map((note) => (\r\n//             <div key={note.id} className={`notification ${note.type}`}>\r\n//               <span>{note.message}</span>\r\n//               <button onClick={() => setNotification(notification.filter((n) => n.id !== note.id))}>\r\n//                 âœ–\r\n//               </button>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { RingLoader } from 'react-spinners';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [insertKey, setInsertKey] = useState('');\r\n  const [insertValue, setInsertValue] = useState('');\r\n  const [deleteKey, setDeleteKey] = useState('');\r\n  const [searchKey, setSearchKey] = useState('');\r\n  const [searchResult, setSearchResult] = useState(null);\r\n  const [notification, setNotification] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [selectedHashing, setSelectedHashing] = useState('extendible');\r\n  const [hashTableState, setHashTableState] = useState(null);\r\n\r\n  const handleInsert = async (e) => {\r\n    e.preventDefault();\r\n    if (!insertKey || !insertValue) {\r\n      addNotification('error', 'Key and Value must be provided for insertion.');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      const response = await axios.post(`http://127.0.0.1:5000/${selectedHashing}/insert`, {\r\n        key: parseInt(insertKey),\r\n        value: insertValue,\r\n      });\r\n\r\n      if (response.data) {\r\n        addNotification('success', `Inserted (${response.data.inserted.key}, ${response.data.inserted.value}) successfully.`);\r\n        setHashTableState(response.data.state);\r\n      } else {\r\n        throw new Error(\"Invalid response structure\");\r\n      }\r\n\r\n      setInsertKey('');\r\n      setInsertValue('');\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.error || 'Error inserting data: ' + error.message;\r\n      addNotification('error', errorMessage);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (e) => {\r\n    e.preventDefault();\r\n    if (!deleteKey) {\r\n      addNotification('error', 'Key must be provided for deletion.');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      const response = await axios.delete(`http://127.0.0.1:5000/${selectedHashing}/delete`, {\r\n        data: { key: parseInt(deleteKey) },\r\n      });\r\n\r\n      if (response.data) {\r\n        addNotification('success', response.data.message);\r\n        setHashTableState(response.data.state);\r\n      } else {\r\n        throw new Error(\"Invalid response structure\");\r\n      }\r\n\r\n      setDeleteKey('');\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.error || 'Error deleting data: ' + error.message;\r\n      addNotification('error', errorMessage);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSearch = async (e) => {\r\n    e.preventDefault();\r\n    if (!searchKey) {\r\n      addNotification('error', 'Key must be provided for search.');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      const response = await axios.get(`http://127.0.0.1:5000/${selectedHashing}/search?key=${searchKey}`);\r\n\r\n      if (response.data) {\r\n        if (response.data.message) {\r\n          setSearchResult(response.data.message);\r\n          addNotification('success', `Found key ${searchKey}: ${response.data.message}`);\r\n        } else {\r\n          addNotification('info', `Key ${searchKey} not found.`);\r\n        }\r\n        setHashTableState(response.data.state);\r\n      } else {\r\n        throw new Error(\"Invalid response structure\");\r\n      }\r\n\r\n      setSearchKey('');\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.error || 'Error searching data: ' + error.message;\r\n      addNotification('error', errorMessage);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const addNotification = (type, message) => {\r\n    const newNotification = { id: new Date().getTime(), type, message };\r\n    setNotification((prev) => [...prev, newNotification]);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setInsertKey('');\r\n    setInsertValue('');\r\n    setDeleteKey('');\r\n    setSearchKey('');\r\n    setSearchResult(null);\r\n    setNotification([]);\r\n    setHashTableState(null);\r\n  };\r\n\r\n  // const renderHashTableState = () => {\r\n  //   if (!hashTableState) return null;\r\n\r\n  //   return (\r\n  //     <div className=\"hash-table-state\">\r\n  //       <h2>Hash Table State</h2>\r\n  //       <p><strong>Current Size:</strong> {hashTableState.current_size}</p>\r\n  //       <p><strong>Entry Count:</strong> {hashTableState.entry_count}</p>\r\n  //       <p><strong>Load Factor:</strong> {hashTableState.load_factor}</p>\r\n  //       <table className=\"hash-table\">\r\n  //         <thead>\r\n  //           <tr>\r\n  //             <th>Bucket Index</th>\r\n  //             <th>Bucket Content</th>\r\n  //           </tr>\r\n  //         </thead>\r\n  //         <tbody>\r\n  //           {hashTableState.bucket_sizes && Object.entries(hashTableState.bucket_sizes).map(([index, size]) => (\r\n  //             <tr key={index}>\r\n  //               <td>{index}</td>\r\n  //               <td>{JSON.stringify(hashTableState.bucket_contents[index] || [])}</td>\r\n  //             </tr>\r\n  //           ))}\r\n  //         </tbody>\r\n  //       </table>\r\n  //     </div>\r\n  //   );\r\n  // };\r\n\r\n//   const renderHashTableState = () => {\r\n//     if (!hashTableState || !hashTableState.bucket_sizes || !hashTableState.bucket_contents) return null;\r\n\r\n//     return (\r\n//         <div className=\"hash-table-state\">\r\n//             <h2>Hash Table State</h2>\r\n//             <p><strong>Current Size:</strong> {hashTableState.current_size}</p>\r\n//             <p><strong>Entry Count:</strong> {hashTableState.entry_count}</p>\r\n//             <p><strong>Load Factor:</strong> {hashTableState.load_factor}</p>\r\n//             <table className=\"hash-table\">\r\n//                 <thead>\r\n//                     <tr>\r\n//                         <th>Bucket Index</th>\r\n//                         <th>Bucket Content</th>\r\n//                     </tr>\r\n//                 </thead>\r\n//                 <tbody>\r\n//                     {Object.entries(hashTableState.bucket_sizes).map(([index, size]) => (\r\n//                         <tr key={index}>\r\n//                             <td>{index}</td>\r\n//                             <td>{JSON.stringify(hashTableState.bucket_contents[index] || [])}</td>\r\n//                         </tr>\r\n//                     ))}\r\n//                 </tbody>\r\n//             </table>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n  // const renderHashTableState = () => {\r\n  //   if (!hashTableState) return null;\r\n\r\n  //   const isLinearHashing = hashTableState.current_size !== undefined;\r\n  //   const isExtendibleHashing = hashTableState.current_level !== undefined;\r\n\r\n  //   return (\r\n  //       <div className=\"hash-table-state\">\r\n  //           <h2>Hash Table State</h2>\r\n  //           {isLinearHashing && (\r\n  //               <>\r\n  //                   <p><strong>Current Size:</strong> {hashTableState.current_size}</p>\r\n  //                   <p><strong>Entry Count:</strong> {hashTableState.entry_count}</p>\r\n  //                   <p><strong>Load Factor:</strong> {hashTableState.load_factor}</p>\r\n  //                   <h3>Linear Hashing - Index Table</h3>\r\n  //                   <table className=\"hash-table\">\r\n  //                       <thead>\r\n  //                           <tr>\r\n  //                               <th>Bucket Index</th>\r\n  //                               <th>Bucket Content</th>\r\n  //                           </tr>\r\n  //                       </thead>\r\n  //                       <tbody>\r\n  //                           {Object.entries(hashTableState.bucket_sizes).map(([index, size]) => (\r\n  //                               <tr key={index}>\r\n  //                                   <td>{index}</td>\r\n  //                                   <td>{JSON.stringify(hashTableState.bucket_contents[index] || [])}</td>\r\n  //                               </tr>\r\n  //                           ))}\r\n  //                       </tbody>\r\n  //                   </table>\r\n  //               </>\r\n  //           )}\r\n\r\n  //           {isExtendibleHashing && (\r\n  //               <>\r\n  //                   <p><strong>Current Level (Global Depth):</strong> {hashTableState.current_level}</p>\r\n  //                   <p><strong>Bucket Count:</strong> {hashTableState.bucket_count}</p>\r\n  //                   <h3>Extendible Hashing - Directory</h3>\r\n  //                   <p><strong>Global Depth:</strong> {hashTableState.current_level}</p>\r\n  //                   <h3>Local Depths</h3>\r\n  //                   <ul>\r\n  //                       {Object.entries(hashTableState.local_depths).map(([index, depth]) => (\r\n  //                           <li key={index}>Bucket {index}: Local Depth {depth}</li>\r\n  //                       ))}\r\n  //                   </ul>\r\n  //                   <h3>Index Table</h3>\r\n  //                   <table className=\"hash-table\">\r\n  //                       <thead>\r\n  //                           <tr>\r\n  //                               <th>Directory</th>\r\n  //                               <th>Bucket Content</th>\r\n  //                           </tr>\r\n  //                       </thead>\r\n  //                       <tbody>\r\n  //                           {Object.entries(hashTableState.bucket_contents).map(([index, content]) => (\r\n  //                               <tr key={index}>\r\n  //                                   <td>{index}</td>\r\n  //                                   <td>{JSON.stringify(content || [])}</td>\r\n  //                               </tr>\r\n  //                           ))}\r\n  //                       </tbody>\r\n  //                   </table>\r\n  //               </>\r\n  //           )}\r\n  //       </div>\r\n  //   );\r\n  // };\r\n\r\n//   const renderHashTableState = () => {\r\n//     if (!hashTableState) return null;\r\n\r\n//     // Identify the type of hashing based on unique properties\r\n//     const isLinearHashing = hashTableState.current_size !== undefined;\r\n//     const isExtendibleHashing = hashTableState.current_level !== undefined;\r\n\r\n//     return (\r\n//         <div className=\"hash-table-state\">\r\n//             <h2>Hash Table State</h2>\r\n            \r\n//             {/* Linear Hashing Display */}\r\n//             {isLinearHashing && (\r\n//                 <>\r\n//                     <h3>Linear Hashing State</h3>\r\n//                     <p><strong>Current Size:</strong> {hashTableState.current_size}</p>\r\n//                     <p><strong>Entry Count:</strong> {hashTableState.entry_count}</p>\r\n//                     <p><strong>Load Factor:</strong> {hashTableState.load_factor.toFixed(2)}</p>\r\n                    \r\n//                     {/* Display Index Table */}\r\n//                     <h3>Linear Hashing - Index Table</h3>\r\n//                     <table className=\"hash-table\">\r\n//                         <thead>\r\n//                             <tr>\r\n//                                 <th>Bucket Index</th>\r\n//                                 <th>Bucket Content</th>\r\n//                             </tr>\r\n//                         </thead>\r\n//                         <tbody>\r\n//                             {Object.entries(hashTableState.bucket_contents).map(([index, content]) => (\r\n//                                 <tr key={index}>\r\n//                                     <td>{index}</td>\r\n//                                     <td>{JSON.stringify(content || [])}</td>\r\n//                                 </tr>\r\n//                             ))}\r\n//                         </tbody>\r\n//                     </table>\r\n//                 </>\r\n//             )}\r\n\r\n//             {/* Extendible Hashing Display */}\r\n//             {isExtendibleHashing && (\r\n//                 <>\r\n//                     <h3>Extendible Hashing State</h3>\r\n//                     <p><strong>Current Level (Global Depth):</strong> {hashTableState.current_level}</p>\r\n//                     <p><strong>Bucket Count:</strong> {hashTableState.bucket_count}</p>\r\n                    \r\n//                     {/* Global Depth Information */}\r\n//                     <h3>Extendible Hashing - Directory</h3>\r\n//                     <p><strong>Global Depth:</strong> {hashTableState.current_level}</p>\r\n                    \r\n//                     {/* Local Depths Section */}\r\n//                     <h3>Local Depths</h3>\r\n//                     <ul>\r\n//                         {Object.entries(hashTableState.local_depths).map(([index, depth]) => (\r\n//                             <li key={index}>Bucket {index}: Local Depth {depth}</li>\r\n//                         ))}\r\n//                     </ul>\r\n                    \r\n//                     {/* Directory Content Table */}\r\n//                     <h3>Index Table</h3>\r\n//                     <table className=\"hash-table\">\r\n//                         <thead>\r\n//                             <tr>\r\n//                                 <th>Directory</th>\r\n//                                 <th>Bucket Content</th>\r\n//                             </tr>\r\n//                         </thead>\r\n//                         <tbody>\r\n//                             {Object.entries(hashTableState.bucket_contents).map(([index, content]) => (\r\n//                                 <tr key={index}>\r\n//                                     <td>{index}</td>\r\n//                                     <td>{JSON.stringify(content || [])}</td>\r\n//                                 </tr>\r\n//                             ))}\r\n//                         </tbody>\r\n//                     </table>\r\n//                 </>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n  // const renderHashTableState = () => {\r\n  //   if (!hashTableState) return null;\r\n\r\n  //   // Identify the type of hashing based on unique properties\r\n  //   const isLinearHashing = hashTableState.current_size !== undefined;\r\n  //   const isExtendibleHashing = hashTableState.current_level !== undefined;\r\n\r\n  //   return (\r\n  //       <div className=\"hash-table-state\">\r\n  //           <h2>Hash Table State</h2>\r\n            \r\n  //           {/* Linear Hashing Display */}\r\n  //           {isLinearHashing && (\r\n  //               <>\r\n  //                   <h3>Linear Hashing State</h3>\r\n  //                   <p><strong>Current Size:</strong> {hashTableState.current_size}</p>\r\n  //                   <p><strong>Entry Count:</strong> {hashTableState.entry_count}</p>\r\n  //                   <p><strong>Load Factor:</strong> {hashTableState.load_factor.toFixed(2)}</p>\r\n                    \r\n  //                   {/* Display Index Table */}\r\n  //                   <h3>Linear Hashing - Index Table</h3>\r\n  //                   <table className=\"hash-table\">\r\n  //                       <thead>\r\n  //                           <tr>\r\n  //                               <th>Bucket Index</th>\r\n  //                               <th>Bucket Content</th>\r\n  //                           </tr>\r\n  //                       </thead>\r\n  //                       <tbody>\r\n  //                           {/* Iterate over bucket_contents, ensuring it's handled safely */}\r\n  //                           {Object.entries(hashTableState.bucket_contents || {}).map(([index, content]) => (\r\n  //                               <tr key={index}>\r\n  //                                   <td>{index}</td>\r\n  //                                   <td>{JSON.stringify(content)}</td>\r\n  //                               </tr>\r\n  //                           ))}\r\n  //                       </tbody>\r\n  //                   </table>\r\n  //               </>\r\n  //           )}\r\n\r\n  //           {/* Extendible Hashing Display */}\r\n  //           {isExtendibleHashing && (\r\n  //               <>\r\n  //                   <h3>Extendible Hashing State</h3>\r\n  //                   <p><strong>Current Level (Global Depth):</strong> {hashTableState.current_level}</p>\r\n  //                   <p><strong>Bucket Count:</strong> {hashTableState.bucket_count}</p>\r\n                    \r\n  //                   {/* Global Depth Information */}\r\n  //                   <h3>Extendible Hashing - Directory</h3>\r\n  //                   <p><strong>Global Depth:</strong> {hashTableState.current_level}</p>\r\n                    \r\n  //                   {/* Local Depths Section */}\r\n  //                   <h3>Local Depths</h3>\r\n  //                   <ul>\r\n  //                       {Object.entries(hashTableState.local_depths || {}).map(([index, depth]) => (\r\n  //                           <li key={index}>Bucket {index}: Local Depth {depth}</li>\r\n  //                       ))}\r\n  //                   </ul>\r\n                    \r\n  //                   {/* Directory Content Table */}\r\n  //                   <h3>Index Table</h3>\r\n  //                   <table className=\"hash-table\">\r\n  //                       <thead>\r\n  //                           <tr>\r\n  //                               <th>Directory</th>\r\n  //                               <th>Bucket Content</th>\r\n  //                           </tr>\r\n  //                       </thead>\r\n  //                       <tbody>\r\n  //                           {/* Display bucket contents for extendible hashing */}\r\n  //                           {Object.entries(hashTableState.bucket_contents || {}).map(([index, content]) => (\r\n  //                               <tr key={index}>\r\n  //                                   <td>{index}</td>\r\n  //                                   <td>{JSON.stringify(content)}</td>\r\n  //                               </tr>\r\n  //                           ))}\r\n  //                       </tbody>\r\n  //                   </table>\r\n  //               </>\r\n  //           )}\r\n  //       </div>\r\n  //   );\r\n  // };\r\n\r\n  const renderHashTableState = () => {\r\n    if (!hashTableState) return null;\r\n  \r\n    // Identify the type of hashing based on unique properties\r\n    const isLinearHashing = hashTableState.current_size !== undefined;\r\n    const isExtendibleHashing = hashTableState.current_level !== undefined;\r\n  \r\n    return (\r\n      <div className=\"hash-table-state\">\r\n        <h2>Hash Table State</h2>\r\n  \r\n        {/* Linear Hashing Display */}\r\n        {isLinearHashing && (\r\n          <>\r\n            <h3>Linear Hashing State</h3>\r\n            <p>\r\n              <strong>Current Size:</strong> {hashTableState.current_size}\r\n            </p>\r\n            <p>\r\n              <strong>Entry Count:</strong> {hashTableState.entry_count}\r\n            </p>\r\n            <p>\r\n              <strong>Load Factor:</strong> {hashTableState.load_factor.toFixed(2)}\r\n            </p>\r\n  \r\n            {/* Display Index Table */}\r\n            <h3>Linear Hashing - Index Table</h3>\r\n            <table className=\"hash-table\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Bucket Index</th>\r\n                  <th>Bucket Content</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {/* Safely iterate over bucket_contents to render the contents */}\r\n                {hashTableState.bucket_contents &&\r\n                  Object.entries(hashTableState.bucket_contents).map(\r\n                    ([index, content]) => (\r\n                      <tr key={index}>\r\n                        <td>{index}</td>\r\n                        <td>{content.length > 0 ? JSON.stringify(content) : \"Empty\"}</td>\r\n                      </tr>\r\n                    )\r\n                  )}\r\n              </tbody>\r\n            </table>\r\n          </>\r\n        )}\r\n  \r\n        {/* Extendible Hashing Display */}\r\n        {isExtendibleHashing && (\r\n          <>\r\n            <h3>Extendible Hashing State</h3>\r\n            <p>\r\n              <strong>Current Level (Global Depth):</strong> {hashTableState.current_level}\r\n            </p>\r\n            <p>\r\n              <strong>Bucket Count:</strong> {hashTableState.bucket_count}\r\n            </p>\r\n  \r\n            {/* Global Depth Information */}\r\n            <h3>Extendible Hashing - Directory</h3>\r\n            <p>\r\n              <strong>Global Depth:</strong> {hashTableState.current_level}\r\n            </p>\r\n  \r\n            {/* Local Depths Section */}\r\n            <h3>Local Depths</h3>\r\n            <ul>\r\n              {hashTableState.local_depths &&\r\n                Object.entries(hashTableState.local_depths).map(([index, depth]) => (\r\n                  <li key={index}>\r\n                    Bucket {index}: Local Depth {depth}\r\n                  </li>\r\n                ))}\r\n            </ul>\r\n  \r\n            {/* Directory Content Table */}\r\n            <h3>Index Table</h3>\r\n            <table className=\"hash-table\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Directory</th>\r\n                  <th>Bucket Content</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {/* Display bucket contents for extendible hashing */}\r\n                {hashTableState.bucket_contents &&\r\n                  Object.entries(hashTableState.bucket_contents).map(([index, content]) => (\r\n                    <tr key={index}>\r\n                      <td>{index}</td>\r\n                      <td>{content.length > 0 ? JSON.stringify(content) : \"Empty\"}</td>\r\n                    </tr>\r\n                  ))}\r\n              </tbody>\r\n            </table>\r\n          </>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <div className=\"App\">\r\n        <div className=\"main-content\">\r\n          <h1>Hash Table Visualization</h1>\r\n          <div>\r\n            <label>Select Hashing Method:</label>\r\n            <select\r\n              value={selectedHashing}\r\n              onChange={(e) => setSelectedHashing(e.target.value)}\r\n              style={{ margin: '10px 0' }}\r\n            >\r\n              <option value=\"extendible\">Extendible Hashing</option>\r\n              <option value=\"linear\">Linear Hashing</option>\r\n            </select>\r\n          </div>\r\n\r\n          <form onSubmit={handleInsert} className=\"form-section\">\r\n            <h2>Insert</h2>\r\n            <input\r\n              type=\"number\"\r\n              placeholder=\"Key\"\r\n              value={insertKey}\r\n              onChange={(e) => setInsertKey(e.target.value)}\r\n            />\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Value\"\r\n              value={insertValue}\r\n              onChange={(e) => setInsertValue(e.target.value)}\r\n            />\r\n            <button type=\"submit\">Insert</button>\r\n          </form>\r\n\r\n          <form onSubmit={handleDelete} className=\"form-section\">\r\n            <h2>Delete</h2>\r\n            <input\r\n              type=\"number\"\r\n              placeholder=\"Key\"\r\n              value={deleteKey}\r\n              onChange={(e) => setDeleteKey(e.target.value)}\r\n            />\r\n            <button type=\"submit\">Delete</button>\r\n          </form>\r\n\r\n          <form onSubmit={handleSearch} className=\"form-section\">\r\n            <h2>Search</h2>\r\n            <input\r\n              type=\"number\"\r\n              placeholder=\"Key\"\r\n              value={searchKey}\r\n              onChange={(e) => setSearchKey(e.target.value)}\r\n            />\r\n            <button type=\"submit\">Search</button>\r\n          </form>\r\n\r\n          {loading && (\r\n            <div className=\"loading-indicator\">\r\n              <RingLoader size={50} color={'#123abc'} loading={loading} />\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"reset-container\">\r\n            <button onClick={handleReset}>Reset</button>\r\n          </div>\r\n\r\n          {searchResult && (\r\n            <div className=\"search-result\">\r\n              <h3>Search Result:</h3>\r\n              <p>{searchResult}</p>\r\n            </div>\r\n          )}\r\n\r\n          {renderHashTableState()}\r\n        </div>\r\n\r\n        <div className=\"notification-panel\">\r\n          <h2>Notifications</h2>\r\n          {notification.map((note) => (\r\n            <div key={note.id} className={`notification ${note.type}`}>\r\n              <span>{note.message}</span>\r\n              <button onClick={() => setNotification(notification.filter((n) => n.id !== note.id))}>\r\n                âœ–\r\n              </button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC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SAAS;MACRrB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMQ,eAAe,GAAGA,CAACuB,IAAI,EAAET,OAAO,KAAK;IACzC,MAAMU,eAAe,GAAG;MAAEC,EAAE,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;MAAEJ,IAAI;MAAET;IAAQ,CAAC;IACnExB,eAAe,CAAEsC,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEJ,eAAe,CAAC,CAAC;EACvD,CAAC;EAED,MAAMK,WAAW,GAAGA,CAAA,KAAM;IACxBjD,YAAY,CAAC,EAAE,CAAC;IAChBE,cAAc,CAAC,EAAE,CAAC;IAClBE,YAAY,CAAC,EAAE,CAAC;IAChBE,YAAY,CAAC,EAAE,CAAC;IAChBE,eAAe,CAAC,IAAI,CAAC;IACrBE,eAAe,CAAC,EAAE,CAAC;IACnBM,iBAAiB,CAAC,IAAI,CAAC;EACzB,CAAC;;EAED;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEF;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEE;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEF;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEE;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMkC,oBAAoB,GAAGA,CAAA,KAAM;IACjC,IAAI,CAACnC,cAAc,EAAE,OAAO,IAAI;;IAEhC;IACA,MAAMoC,eAAe,GAAGpC,cAAc,CAACqC,YAAY,KAAKC,SAAS;IACjE,MAAMC,mBAAmB,GAAGvC,cAAc,CAACwC,aAAa,KAAKF,SAAS;IAEtE,oBACE3D,OAAA;MAAK8D,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC/B/D,OAAA;QAAA+D,QAAA,EAAI;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAGxBV,eAAe,iBACdzD,OAAA,CAAAE,SAAA;QAAA6D,QAAA,gBACE/D,OAAA;UAAA+D,QAAA,EAAI;QAAoB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC7BnE,OAAA;UAAA+D,QAAA,gBACE/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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}